{"version":3,"sources":["components/CustomHooks/UseMediaQuery.js","components/BarcodeReader/BarcodeReader.jsx","components/CustomHooks/UseHandleInputs.js","helpers/provinces.js","components/BarcodeInput/BarcodeInput.jsx","components/CompareResult/CompareResult.jsx","_api/axios.js","_services/barcode.service.js","App.js","index.js"],"names":["useMediaQuery","useState","size","setSize","useEffect","changeSize","media","matches","media602","window","matchMedia","media402","addListener","removeListener","BarcodeReader","barcodeCheck","data","setData","mounted","width","height","onUpdate","err","result","text","useHandleInputs","filterStateInitial","filterState","setFilterState","handleChange","event","name","target","value","provinces","BarcodeInput","props","barcode","id_provincia","precio","showBarcodeReader","setShowBarcodeReader","showError","setShowError","setTimeout","className","prevState","Button","onClick","variant","Card","Title","length","Text","Form","Control","type","placeholder","onChange","as","custom","map","province","key","disabled","undefined","handleSubmit","CompareResult","currentPrice","price","message","messageColor","setMessageColor","Table","striped","bordered","hover","clienteAxios","axios","create","baseURL","process","REACT_APP_API","barcodeServices","comparePrice","filters","a","post","console","log","alert","App","response","setResponse","setCurrentPrice","showResponse","setShowResponse","Header","Body","mensaje","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.186fde83.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useMediaQuery = () => {\n    const [size, setSize] = useState(500)\n\n    useEffect(() => {\n        const changeSize = (media) => {\n            if (media.media === \"(min-width: 402px)\") {\n                if (media.matches) {\n                    setSize(400)\n                } else {\n                    setSize(320)\n                }\n            }\n            if (media.media === \"(min-width: 602px)\") {\n                if (media.matches) {\n                    setSize(500)\n                }\n            }\n        }\n        const media602 = window.matchMedia(\"(min-width: 602px)\")\n        const media402 = window.matchMedia(\"(min-width: 402px)\")\n        changeSize(media602)\n        changeSize(media402)\n        media602.addListener(changeSize)\n        media402.addListener(changeSize)\n        return () => {\n            media602.removeListener(changeSize)\n            media402.removeListener(changeSize)\n        }\n    }, [])\n\n    return [size]\n}\nexport default useMediaQuery","import React, { useEffect, useState } from 'react';\r\nimport BarcodeScannerComponent from \"react-webcam-barcode-scanner\";\r\nimport useMediaQuery from '../CustomHooks/UseMediaQuery';\r\n\r\nfunction BarcodeReader({ barcodeCheck }) {\r\n  // use a custom Hook to manage responsiveness of Barcode Reader\r\n  const [size] = useMediaQuery()\r\n\r\n  const [data, setData] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check for Barcode catch and pass data\r\n    let mounted = true\r\n    if (mounted) {\r\n      if (data) {\r\n        barcodeCheck(data)\r\n      }\r\n    }\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [data, barcodeCheck])\r\n\r\n  return (\r\n    <>\r\n      <BarcodeScannerComponent\r\n        width={size}\r\n        height={size}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text)\r\n          else setData(false)\r\n        }}\r\n      />\r\n      <p>{data}</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BarcodeReader;","import { useState } from 'react'\r\n\r\nconst useHandleInputs = (filterStateInitial = {}) => {\r\n    const [filterState, setFilterState] = useState(filterStateInitial)\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n        setFilterState({\r\n            ...filterState,\r\n            [name]: value\r\n        })\r\n    }\r\n    return { filterState, handleChange, setFilterState }\r\n}\r\n\r\nexport default useHandleInputs","const provinces = [\r\n    'cordoba',\r\n    'santa fe',\r\n    'provincia de buenos aires',\r\n    'santa cruz',\r\n    'rio negro',\r\n    'tucuman',\r\n    'la pampa',\r\n    'san luis',\r\n    'chubut',\r\n    'salta',\r\n    'mendoza',\r\n    'chaco',\r\n    'misiones',\r\n    'catamarca',\r\n    'ciudad autonoma de buenos aires',\r\n    'corrientes',\r\n    'santiago del estero',\r\n    'san juan',\r\n    'entre rios',\r\n    'tierra del fuego',\r\n    'la rioja',\r\n    'jujuy',\r\n    'formosa'\r\n]\r\n\r\nexport const getProvinces = () => {\r\n    return provinces\r\n}","import React, { useState, Fragment, useEffect } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport BarcodeReader from '../BarcodeReader/BarcodeReader'\r\nimport useHandleInputs from '../CustomHooks/UseHandleInputs';\r\nimport { getProvinces } from '../../helpers/provinces';\r\n\r\n\r\nexport default function BarcodeInput(props) {\r\n  // use a custom hook to handle inputs\r\n    const { filterState, handleChange, setFilterState } = useHandleInputs({ barcode: '', id_provincia: '1', precio: '0' })\r\n    const [showBarcodeReader, setShowBarcodeReader] = useState(false)\r\n    const [showError, setShowError] = useState('')\r\n  \r\n    useEffect(() => {\r\n      // handle error display\r\n      if (showError) {\r\n        setTimeout(() => {\r\n          setShowError('')\r\n        }, 2000)\r\n      }\r\n    }, [showError])\r\n\r\n    useEffect(() => {\r\n        setShowBarcodeReader(false)\r\n    }, [filterState.barcode])\r\n  \r\n    const barcodeCheck = (data) => {\r\n      setFilterState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          barcode: data\r\n        }\r\n      })\r\n    }\r\n  \r\n    const handleSubmit = () => {\r\n      if (filterState['barcode'].length === 0) return setShowError('Por favor escanee un codigo de barras antes de comparar precios.')\r\n      if (filterState['precio'] === undefined) return setShowError('Por favor ingrese un precio para el producto que desea comparar.')\r\n      props.handleSubmit(filterState)\r\n    }\r\n    return (\r\n        <div>\r\n        {showBarcodeReader\r\n            ? <div className=\"barcode-container-app\">\r\n              <BarcodeReader\r\n                barcodeCheck={barcodeCheck}\r\n              />\r\n              <Button\r\n                onClick={() => setShowBarcodeReader(false)}\r\n                variant=\"primary\"\r\n                className=\"scan-button-app\"\r\n              >\r\n                Cancelar escaneo.\r\n              </Button>\r\n            </div>\r\n            : <Fragment>\r\n              <Card.Title>Lea el codigo de barras del producto que desea comparar</Card.Title>\r\n              {filterState['barcode'].length > 0 &&\r\n                <Card.Text className=\"mt-3\">\r\n                  {'El codigo de barras registrado es: ' + filterState['barcode']}\r\n                </Card.Text>\r\n              }\r\n              <Button\r\n                onClick={() => setShowBarcodeReader(true)}\r\n                variant=\"primary\"\r\n                className=\"scan-button-app\"\r\n              >\r\n                {filterState['barcode'].length > 0 ? 'Escanear de nuevo' : 'Escanear'}\r\n              </Button>\r\n            </Fragment>\r\n          }\r\n          <Card.Text className=\"mt-3\">\r\n            Ingrese el precio del producto seleccionado\r\n      </Card.Text>\r\n          <Form.Control\r\n            name=\"precio\"\r\n            type=\"number\"\r\n            placeholder=\"Precio del producto\"\r\n            value={filterState['precio']}\r\n            onChange={(event) => handleChange(event)}\r\n          />\r\n          <Card.Text className=\"mt-3\">\r\n            ¿En que provincia se encuentra?\r\n      </Card.Text>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"id_provincia\"\r\n            value={filterState['id_provincia'] || 1}\r\n            onChange={(event) => handleChange(event)}\r\n          >\r\n            {getProvinces().map((province, key) => (\r\n              <option key={key} value={key + 1}>{province}</option>\r\n            ))}\r\n          </Form.Control>\r\n          <Button\r\n            variant={showError ? \"danger\" : \"primary\"}\r\n            disabled={showError}\r\n            className=\"mt-4\"\r\n            onClick={() => handleSubmit()}\r\n          >\r\n            {showError ? showError : 'Comparar'}\r\n          </Button>    \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nexport default function CompareResult({currentPrice, price, message}) {\r\n    const [messageColor, setMessageColor] = useState('')\r\n\r\n    useEffect(() => {\r\n        // Choose a text color for each message\r\nif(message) {\r\n    switch (message) {\r\n        case 'caro': setMessageColor('text-danger')\r\n            break;\r\n        case 'barato': setMessageColor('text-success')\r\n            break;\r\n        default: setMessageColor('')\r\n            break;\r\n    }\r\n}\r\n    }, [message])\r\n\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Su precio</th>\r\n                    <th>Nuestro Precio</th>\r\n                    <th>Relacion</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td><h3>{currentPrice}</h3></td>\r\n                    <td><h3>{price}</h3></td>\r\n                    <td className={messageColor}>\r\n                        <h3>{message}</h3>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n","import axios from \"axios\";\r\n\r\nlet clienteAxios = axios.create({\r\n  baseURL: process.env.REACT_APP_API\r\n})\r\n\r\nexport default clienteAxios;\r\n","import clienteAxios from '../_api/axios'\r\n\r\nexport const barcodeServices = {\r\n    comparePrice\r\n}\r\n\r\nasync function comparePrice(filters) {\r\n    try {\r\n        const { data } = await clienteAxios.post(`/barcode/compareprice/`, filters)\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n        alert(error.message)\r\n        return error\r\n    }\r\n}","import React, { useState, Fragment } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport BarcodeInput from './components/BarcodeInput/BarcodeInput';\nimport CompareResult from './components/CompareResult/CompareResult'\nimport { barcodeServices } from './_services/'\nimport './app.scss';\n\nfunction App() {\n  const [response, setResponse] = useState({})\n  const [currentPrice, setCurrentPrice] = useState(null)\n  const [showResponse, setShowResponse] = useState(false)\n\n  const handleSubmit = async (filters) => {\n    // Save current price for compare\n    setCurrentPrice(filters.precio)\n    const response = await barcodeServices.comparePrice(filters)\n    setResponse(response)\n    setShowResponse(true)\n  }\n\n  return (\n    <div className=\"container-app\">\n      <Card className=\"card-app\">\n        <Card.Header className=\"text-center\">Compare su precio!</Card.Header>\n        <Card.Body className=\"cardBody-app\">\n          {showResponse\n            ? <Fragment> \n             <CompareResult\n              currentPrice={currentPrice}\n              price={response.precio}\n              message={response.mensaje}\n            />\n            <Button\n            variant=\"primary\"\n            className=\"mt-4\"\n            onClick={() => setShowResponse(false)}\n          >\n            Comparar otro producto\n          </Button>  \n            </Fragment>\n            : <BarcodeInput\n              handleSubmit={handleSubmit}\n            />\n          }\n\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}